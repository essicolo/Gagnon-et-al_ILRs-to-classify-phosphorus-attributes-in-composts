def sbp_basis(sbp):
    """
    Builds an orthogonal basis from a sequential binary partition
    
    
    Parameter
    ---------
    sbp: np.array or pd.DataFrame, int
        A contrast matrix, also known as a sequential binary partition, where
        every row represents a partition between two groups of features. A part
        labelled `+1` would correspond to that feature being in the numerator of
        the given row partition, a part labelled `-1` would correspond to
        features being in the denominator of that given row partition, and `0`
        would correspond to features excluded in the row partition.
    
    Returns
    -------
    np.array
        An orthonormal basis in the Aitchison simplex

    """
    n_pos = (sbp == 1).sum(axis=1)
    n_neg = (sbp == -1).sum(axis=1)
    psi = np.zeros(sbp.shape)
    for i in range(0, sbp.shape[0]):
        psi[i, :] = sbp[i, :] * np.sqrt((n_neg[i] / n_pos[i])**sbp[i, :] /
                                        np.sum(np.abs(sbp[i, :])))
    return clr_inv(psi)
    
def ilrDefinition(sbp, side="-+", sep_elem = ",", sep_bal = " | ", sep_left = "[", sep_right = "]"):

    """
    Creates a vector of pretty names for ilr balances, e.g. [Mg,Ca | N,P,K]
    
    Parameters
    ----------
    sbp: pd.DataFrame, int
        A sequantial binary partition
    side: string
        '-+' for the numerator on left of '+-' for the numerator on right
    sep_elem: string
        A string separating elements of the simplex
    sep_bal: string
        A string separating denominator and numerator
    sep_left: string
        A string to start
    sep_right: strinf
        A string to end
        
    Returns
    -------
    np.array, string
        A vector of strings
    
    """
    
    if sbp.shape[0] != (sbp.shape[1] -1):
        raise ValueError("SBP not valid")
    
    ilrDef = []
    
    for n in range(sbp.shape[0]):
        pos = sbp.loc[n, sbp.iloc[n,:] == 1].index.values
        neg = sbp.loc[n, sbp.iloc[n,:] == -1].index.values
    
        if (side=="-+"):
            pos = pos[::-1]
            neg = neg[::-1]

        pos_group = str()
        neg_group = str()
    
        for i in range(len(pos)):
            if i == (len(pos)-1):
                pos_group = pos_group + pos[i]
            else:
                pos_group = pos_group + pos[i] + sep_elem

        for i in range(len(neg)):
            if i == (len(neg)-1):
                neg_group = neg_group + neg[i]
            else:
                neg_group = neg_group + neg[i] + sep_elem
        
        if side=="+-":
            ilrDef.append(sep_left + pos_group + sep_bal + neg_group + sep_right)
        else:
            ilrDef.append(sep_left + neg_group + sep_bal + pos_group + sep_right)
        
    return ilrDef
